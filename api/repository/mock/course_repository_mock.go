// Code generated by MockGen. DO NOT EDIT.
// Source: api/repository/course.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/liuyifan1996/course-selection-system/api/model"
)

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseRepository) Create(course *model.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", course)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCourseRepositoryMockRecorder) Create(course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseRepository)(nil).Create), course)
}

// Delete mocks base method.
func (m *MockCourseRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockCourseRepository) GetAll(pagination model.Pagination, sortBy, sortOrder string, fields []string) ([]map[string]interface{}, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pagination, sortBy, sortOrder, fields)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCourseRepositoryMockRecorder) GetAll(pagination, sortBy, sortOrder, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCourseRepository)(nil).GetAll), pagination, sortBy, sortOrder, fields)
}

// GetByCourseName mocks base method.
func (m *MockCourseRepository) GetByCourseName(courseName string, pagination model.Pagination, sortBy, sortOrder string, fields []string) ([]map[string]interface{}, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourseName", courseName, pagination, sortBy, sortOrder, fields)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByCourseName indicates an expected call of GetByCourseName.
func (mr *MockCourseRepositoryMockRecorder) GetByCourseName(courseName, pagination, sortBy, sortOrder, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourseName", reflect.TypeOf((*MockCourseRepository)(nil).GetByCourseName), courseName, pagination, sortBy, sortOrder, fields)
}

// GetByID mocks base method.
func (m *MockCourseRepository) GetByID(id int64) (*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCourseRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCourseRepository)(nil).GetByID), id)
}

// GetByTeacherID mocks base method.
func (m *MockCourseRepository) GetByTeacherID(teacherID string, pagination model.Pagination, sortBy, sortOrder string, fields []string) ([]map[string]interface{}, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTeacherID", teacherID, pagination, sortBy, sortOrder, fields)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByTeacherID indicates an expected call of GetByTeacherID.
func (mr *MockCourseRepositoryMockRecorder) GetByTeacherID(teacherID, pagination, sortBy, sortOrder, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTeacherID", reflect.TypeOf((*MockCourseRepository)(nil).GetByTeacherID), teacherID, pagination, sortBy, sortOrder, fields)
}

// GetByTeacherName mocks base method.
func (m *MockCourseRepository) GetByTeacherName(teacherName string, pagination model.Pagination, sortBy, sortOrder string, fields []string) ([]map[string]interface{}, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTeacherName", teacherName, pagination, sortBy, sortOrder, fields)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByTeacherName indicates an expected call of GetByTeacherName.
func (mr *MockCourseRepositoryMockRecorder) GetByTeacherName(teacherName, pagination, sortBy, sortOrder, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTeacherName", reflect.TypeOf((*MockCourseRepository)(nil).GetByTeacherName), teacherName, pagination, sortBy, sortOrder, fields)
}

// GetEnrollmentCount mocks base method.
func (m *MockCourseRepository) GetEnrollmentCount(courseID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentCount", courseID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentCount indicates an expected call of GetEnrollmentCount.
func (mr *MockCourseRepositoryMockRecorder) GetEnrollmentCount(courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentCount", reflect.TypeOf((*MockCourseRepository)(nil).GetEnrollmentCount), courseID)
}

// Update mocks base method.
func (m *MockCourseRepository) Update(course *model.Course, updateData map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", course, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseRepositoryMockRecorder) Update(course, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseRepository)(nil).Update), course, updateData)
}
